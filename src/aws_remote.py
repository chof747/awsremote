#!/usr/bin/env python3
# encoding: utf-8
'''
awsremote -- command line program to execute main aws tasks on a project

awsremote is a command line program which performs standard activities on aws 
for specific cumbersome tasks like

- generating a snapshot and test image
- starting a test instance

@author:     Christian Hofbauer

@copyright:  2018 Christian Hofbauer. All rights reserved.

@license:    GPL

@contact:    chof@gmx.at
@deffield    updated: Sept. 2018
'''

import sys
import os

from datetime import datetime

from optparse import OptionParser
from optparse import OptParseError

from awsremote import AWSRemote

__all__ = []
__version__ = 0.1
__date__ = '2018-09-15'
__updated__ = '2018-09-15'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    program_usage = '''usage: awsremote [-p project_path] [-vvv] command''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2018 Christian Hofbauer                                           \
                Licensed under the GPL"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-p", "--project", dest="projectPath", help="set the project path [default: %default]")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")
        #
        parser.add_option("-n", "--name", dest="name", help="name of the AWS resource setup by the command (e.g. image name, EC2 Name")
        parser.add_option("-e", "--environment", dest="environment", help="The environment which an action should be applied on (systemtest|production)")
        parser.add_option("-r", "--replace", dest="replace", action="store_true", help="Replace instances for a specific environment")

        # set defaults
        parser.set_defaults(projectPath=".", 
                            verbose=0, 
                            name='', 
                            environment='',
                            replace=False)

        # process options
        (opts, args) = parser.parse_args(argv)
        command = args[0]

        if DEBUG == 1:
            if opts.verbose > 0:
                print("verbosity level = %d    " % opts.verbose)
            if opts.projectPath:
                print("projectPath = %s" % opts.projectPath)
            print("command = %s" % command)
            
        # MAIN BODY #
        awsremote = AWSRemote(opts.projectPath, opts.verbose)
        config = awsremote.config
        
        if command == 'snapshot':
            if opts.name != '':
                imageName = opts.name
            else:
                imageName = "snapshot-{: %Y-%m-%dT%H-%M-%S}".format(datetime.now())
            description = \
                "Test Image as of {: %Y-%m-%d %H:%M:%S}".format(datetime.now())
                
            config.log(config.INFO, 
                "creating snapshot: %s with description '%s'" % (imageName, description))
                
                
            awsremote.makeAmiImage(imageName, description)
        
        elif command == 'create-env':
            awsremote.createInstanceFromAmi(opts.environment, opts.replace)
            
        elif command == 'terminate':
            awsremote.terminateInstance(opts.environment)
        
        elif command == 'login':
            awsremote.login(opts.environment)
            
        elif command == 'start':
            awsremote.startInstance(opts.environment)

        elif command == 'stop':
            awsremote.stopInstance(opts.environment)
        

    except OptParseError as e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        pass
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'awsremote_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())